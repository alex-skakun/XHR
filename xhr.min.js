!function (a) {
    "use strict";
    function b (a, b) {
        var d, e, f, g, h, i, j = {}, k = Object.keys(c.defaults.headers);
        for (h = 0, i = k.length; i > h; h++) {
            f = k[h], j[f.toLowerCase()] = c.defaults.headers[f];
        }
        if ("object" == typeof b) {
            for (d = Object.keys(b), h = 0, i = d.length; i > h; h++) {
                f = d[h], j[f.toLowerCase()] =
                    b[f];
            }
        }
        for (e = Object.keys(j), h = 0, i = e.length; i > h; h++) {
            f = e[h], g = j[f], "undefined" != typeof g &&
            null !== g && a.setRequestHeader(f, String(g))
        }
    }

    function c (d) {
        if (d) {
            var e = new XMLHttpRequest, f = new c.XHRPromise(e), g = "", h = !0, i = null;
            if (d.method = "string" == typeof d.method ? d.method : c.defaults.method, "object" ==
                typeof d.attributes && d.attributes) {
                var j = Object.keys(d.attributes);
                j.forEach(function (a) {e[a] = d.attributes[a]})
            }
            if ("object" == typeof d.params && d.params) {
                var k = [], l = Object.keys(d.params);
                l.forEach(function (a) {
                    var b = d.params[a];
                    Array.isArray(b) ? b.forEach(function (b) {k.push(a + "=" + b)}) :
                    "object" == typeof b && b ? k.push(a + "=" + JSON.stringify(b)) :
                    "undefined" != typeof b && k.push(a + "=" + b)
                }), k.length && (g = "?" + k.join("&"))
            }
            if (void 0 !== d.async && (h = !!d.async), e.open(d.method, d.url + g, h), b(e, d.headers), void 0 !==
                d.data) {
                var m = d.data;
                i = m instanceof (a.ArrayBufferView || a.ArrayBuffer) || m instanceof a.Blob ||
                    m instanceof a.Document || m instanceof a.FormData ? m :
                    "object" == typeof m && m ? JSON.stringify(m) : String(m)
            }
            return e.addEventListener("error", function (a) {f.applyCallback("error", a)}), e.addEventListener(
                "progress", function (a) {f.applyCallback("progress", a)}), e.addEventListener("loadstart",
                function (a) {f.applyCallback("loadstart", a)}), e.addEventListener("loadend",
                function (a) {f.applyCallback("loadend", a)}), e.addEventListener("abort",
                function (a) {f.applyCallback("abort", a)}), e.addEventListener("load", function (a) {
                f.applyCallback("load", a);
                var b = e.response;
                if ("json" !== e.responseType) {
                    try {b = JSON.parse(e.responseText)} catch (a) {b = e.responseText}
                }
                e.status >= 200 && e.status < 400 ? f.applyCallback("success", b, e) :
                e.status >= 400 && e.status < 600 && f.applyCallback("error", b, e)
            }, !1), setTimeout(function () {e.send(i)}, 0), f.actions
        }
        throw new Error("Config object is required.")
    }

    Object.defineProperty(c, "defaults", {
        value: {
            method: "GET",
            headers: {},
            attributes: {
                responseType: "",
                timeout: 0
            }
        },
        configurable: !1,
        writable: !1
    }), Object.defineProperty(c, "interceptors", {
        value: {
            response: null,
            responseError: null
        },
        configurable: !0,
        writable: !0
    }), a.XHR = c, "function" == typeof define && null !== define.amd && define("XHR", [], function () {return c})
}(window), function (a) {
    "use strict";
    function b (a) {
        var b = this;
        this.silent = !1, this.interceptors = {}, this.callbacks = {
            error: null,
            loadStart: null,
            progress: null,
            loadEnd: null,
            abort: null,
            load: null,
            success: null
        }, this.actions = {
            interceptors: function (a) {return b.interceptors = a, b.actions},
            silent: function () {return b.silent = !0, b.actions},
            error: function (a) {return b.callbacks.error = a, b.actions},
            loadStart: function (a) {return b.callbacks.loadStart = a, b.actions},
            progress: function (a) {return b.callbacks.progress = a, b.actions},
            loadEnd: function (a) {return b.callbacks.loadEnd = a, b.actions},
            abort: function (a) {return b.callbacks.abort = a, b.actions},
            load: function (a) {return b.callbacks.load = a, b.actions},
            success: function (a) {return b.callbacks.success = a, b.actions},
            getXHR: function () {
                return a instanceof XMLHttpRequest ? a :
                {abort: function () {clearTimeout(a), b.applyCallback("abort")}}
            }
        }
    }

    var c = {
        success: "response",
        error: "responseError"
    };
    b.prototype.applyCallback = function (a, b, d) {
        var e = this.callbacks[a];
        this.checkInterceptor(c[a], d) && "function" == typeof e && e.call(null, this.applyOwnInterceptor(c[a], b), d)
    }, b.prototype.checkInterceptor = function (b, c) {
        return b && "function" == typeof a.interceptors[b] ? a.interceptors[b](c) || this.silent : !0
    }, b.prototype.applyOwnInterceptor = function (a, b) {
        var c = this.interceptors[a];
        return "function" == typeof c ? c(b) : b
    }, a.XHRPromise = b
}(window.XHR);